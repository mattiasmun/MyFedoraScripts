let ns = null;

/** @param {NS} ns00 **/
export async function main(ns00) {
    ns = ns00;
    var host = ns.args[0];
    var target = ns.args[1];
    var threads = ns.args[2];
    var moneyThresh = ns.getServerMaxMoney(target) * 0.8;
    var threadsMax = 0.1 / ns.hackAnalyze(target);
    ns.tprint('Amount of threads needed to hack 10% of money: ', threadsMax);
    var weakenThreads = Math.min(threads, threadsMax * 700);
    var growThreads = Math.min(threads, threadsMax * 40);
    var oldThreadsMax = threadsMax;
    threadsMax -= threadsMax % 1;
    if (threadsMax > 0) {
        threads = Math.min(threads, threadsMax);
    } else if (oldThreadsMax >= 0) {
        threads = 1;
    }
    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;
    var sleep00 = securityThresh ** 2 * 5 + 100;
    var a00 = 0;
    var a01 = 0;
    var a02 = 0;

    while (true) {
        if (ns.getServerSecurityLevel(target) > securityThresh) {
            ns.exec('weaken.ns', host, weakenThreads, target, weakenThreads, 0, a00);
            a00++;
            a00 = a00 % 1e4;
        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {
            ns.exec('grow.ns', host, growThreads, target, growThreads, 0, a01);
            a01++;
            a01 = a01 % 1e4;
        } else {
            ns.exec('hack.ns', host, threads, target, threads, 0, a02);
            a02++;
            a02 = a02 % 1e4;
        }
        await ns.sleep(randomFloat(sleep00));
    }
}

function randomFloat(n00) {
    var x00 = Math.log10(n00);
    x00 = Math.round(x00);

    n00 *= 10 ** (2 - x00);
    n00 = Math.round(n00);
    n00 /= 10 ** (2 - x00);

    x00 = 1 / 10 ** x00;
    x00 *= 1e14;

    var randomFloat00 = Math.random() * 9e10 + 1e10;
    randomFloat00 -= randomFloat00 % 1;
    randomFloat00 *= 10;
    randomFloat00 += Math.random() * 9 + 1;
    randomFloat00 -= randomFloat00 % 1;
    randomFloat00 /= x00;
    n00 += randomFloat00;
    return n00;
}
