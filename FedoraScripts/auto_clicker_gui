#!/usr/bin/python
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import subprocess
import time
from pynput import keyboard

class AutoClickerGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Merged Auto-Clicker GUI")
        self.geometry("450x550")
        self.resizable(False, False)
        
        # Event to signal the clicking loop to stop
        self.stop_event = threading.Event()
        self.is_running = False
        self.thread = None
        self.listener = None

        # Style configuration for a modern look
        self.style = ttk.Style(self)
        self.style.theme_use('clam')
        self.style.configure('TFrame', background='#f0f0f0')
        self.style.configure('TLabel', background='#f0f0f0', font=('Arial', 10))
        self.style.configure('TButton', font=('Arial', 10, 'bold'))
        self.style.configure('TCheckbutton', background='#f0f0f0')
        self.style.configure('TEntry', fieldbackground='white')
        self.style.configure('Heading.TLabel', font=('Arial', 16, 'bold'))

        # Create the main frame
        self.main_frame = ttk.Frame(self, padding=20)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Title
        self.title_label = ttk.Label(self.main_frame, text="Dotool GUI Clicker", style='Heading.TLabel')
        self.title_label.pack(pady=(0, 20))

        # Coordinates Input
        self.coords_frame = ttk.Frame(self.main_frame)
        self.coords_frame.pack(fill=tk.X, pady=5)
        ttk.Label(self.coords_frame, text="X Coordinate:").pack(side=tk.LEFT, padx=(0, 5))
        self.x_entry = ttk.Entry(self.coords_frame, width=10)
        self.x_entry.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Label(self.coords_frame, text="Y Coordinate:").pack(side=tk.LEFT, padx=(0, 5))
        self.y_entry = ttk.Entry(self.coords_frame, width=10)
        self.y_entry.pack(side=tk.LEFT)

        # Click Count Input
        self.count_frame = ttk.Frame(self.main_frame)
        self.count_frame.pack(fill=tk.X, pady=5)
        ttk.Label(self.count_frame, text="Clicks (0 for infinite):").pack(side=tk.LEFT, padx=(0, 5))
        self.count_entry = ttk.Entry(self.count_frame, width=10)
        self.count_entry.insert(0, "10")
        self.count_entry.pack(side=tk.LEFT)

        # Delay Input
        self.delay_frame = ttk.Frame(self.main_frame)
        self.delay_frame.pack(fill=tk.X, pady=5)
        ttk.Label(self.delay_frame, text="Delay between clicks (seconds):").pack(side=tk.LEFT, padx=(0, 5))
        self.delay_entry = ttk.Entry(self.delay_frame, width=10)
        self.delay_entry.insert(0, "0.5")
        self.delay_entry.pack(side=tk.LEFT)
        
        # Alt+Tab Checkbox
        self.alt_tab_var = tk.BooleanVar()
        self.alt_tab_check = ttk.Checkbutton(self.main_frame, text="Switch Window (Alt+Tab)", variable=self.alt_tab_var)
        self.alt_tab_check.pack(pady=10)

        # Control Buttons
        self.button_frame = ttk.Frame(self.main_frame)
        self.button_frame.pack(pady=20)
        self.start_button = ttk.Button(self.button_frame, text="Start", command=self.start_clicking)
        self.start_button.pack(side=tk.LEFT, padx=10)
        self.stop_button = ttk.Button(self.button_frame, text="Stop", command=self.stop_clicking, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=10)

        # Status Label
        self.status_label = ttk.Label(self.main_frame, text="Status: Ready", font=('Arial', 10, 'italic'))
        self.status_label.pack(pady=10)

        # Instructions Section
        self.instructions_label = ttk.Label(self.main_frame, 
            text="Instructions:\n"
                 "1. Enter the X and Y coordinates to click.\n"
                 "2. Optionally, check the 'Switch Window' box to use Alt+Tab.\n"
                 "3. Press 'Start' to begin the clicking process.\n"
                 "4. **Press the ESC key on your keyboard to stop the process at any time.**",
            justify=tk.LEFT)
        self.instructions_label.pack(pady=10, fill=tk.X)
        
        # Start the keyboard listener thread
        self.listener = keyboard.Listener(on_press=self.on_press)
        self.listener.start()

    def send_dotool_command(self, command):
        """Sends a command to dotool."""
        subprocess.run(
            f"echo {command} | dotoolc",
            shell=True,
            capture_output=True,
            text=True
        )

    def dotool_click(self, x, y):
        """Performs a click at the specified coordinates using dotool."""
        self.send_dotool_command(f"click --x {x} --y {y}")

    def alt_tab_with_dotool(self):
        """Performs an Alt+Tab key sequence using dotool."""
        self.send_dotool_command("keydown k:56") # Alt_L
        time.sleep(0.1)
        self.send_dotool_command("keydown k:15") # Tab
        time.sleep(0.1)
        self.send_dotool_command("keyup k:15") # Tab
        time.sleep(0.1)
        self.send_dotool_command("keyup k:56") # Alt_L
        
    def on_press(self, key):
        """Pynput callback to stop the clicking loop on ESC key press."""
        try:
            if key == keyboard.Key.esc:
                print("Escape key pressed. Stopping script...")
                self.stop_clicking()
                return False  # Stops the listener
        except AttributeError:
            pass

    def start_clicking(self):
        if self.is_running:
            return

        try:
            x = int(self.x_entry.get())
            y = int(self.y_entry.get())
            count = int(self.count_entry.get())
            delay = float(self.delay_entry.get())
            
            if delay <= 0:
                messagebox.showerror("Invalid Input", "Delay must be a positive number.")
                return
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid numbers.")
            return

        self.is_running = True
        self.stop_event.clear()
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.status_label.config(text="Status: Running...")

        self.thread = threading.Thread(target=self.clicking_loop, args=(x, y, count, delay))
        self.thread.daemon = True
        self.thread.start()

    def stop_clicking(self):
        if not self.is_running:
            return

        self.is_running = False
        self.stop_event.set()
        self.status_label.config(text="Status: Stopping...")
        
        if self.thread and self.thread.is_alive():
            self.thread.join()

        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.status_label.config(text="Status: Stopped")

    def clicking_loop(self, x, y, count, delay):
        i = 0
        while not self.stop_event.is_set() and (count == 0 or i < count):
            if self.alt_tab_var.get():
                try:
                    self.alt_tab_with_dotool()
                    time.sleep(1)
                except Exception as e:
                    print(f"Error switching windows: {e}")
            
            try:
                self.dotool_click(x, y)
                time.sleep(delay)
            except Exception as e:
                print(f"Error during clicking: {e}")
                self.stop_event.set()
            
            i += 1

        self.stop_clicking()

if __name__ == "__main__":
    app = AutoClickerGUI()
    app.mainloop()

