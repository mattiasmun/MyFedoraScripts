#!/bin/python3
import gmpy2 as gp
import cmath
import math

gp.get_context().precision = 127
# 1371742100/1111111111 + 2606309890/1111111111i
# equals to 1.234567890… + 2.345678901…i. Two numbers with repeating digits.
# complex_number = gp.mpc(1371742100 + 2606309890j)/1111111111

_one = gp.mpfr(1)
_eps = gp.next_above(_one) - _one
#print(_eps)

def newton_raphson(f, df, x0, rtol=1e-30, atol=1e-30, max_iter=100):
	"""
	Implements the Newton-Raphson method to find a root of the function f.
	
	Args:
		f: The function to find the root of.
		df: The derivative of the function f.
		x0: The initial guess for the root.
		rel_tol: Relative tolerance for isclose.
		abs_tol: Absolute tolerance for isclose.
		max_iter: The maximum number of iterations.
	
	Returns:
		The approximate root of the function f.
	"""
	
	for i in range(max_iter):
		x1 = x0 - f(x0) / df(x0)
#		print("x1:", x1)
		if cmath.isclose(x1, x0, rel_tol=rtol, abs_tol=atol):
			return x1
		x0 = x1
	return None	# Failed to converge

def ITP(f, a, b, epsilon=None, k1=None, k2=2, n0=1, max_iter=100):
	if epsilon is None:
		epsilon = _eps
	if k1 is None:
		k1 = 0.2 / (b - a)
	
	if not (0 < _itr(k1) or cmath.isfinite(k1)):
		raise ValueError("k1 must be between 0 and ∞")
	if not (1 <= k2 < 1 + (1 + math.sqrt(gp.mpfr(5))) / 2):
		raise ValueError("k2 must be between 1 and 1 + (1 + √5)/2 (1 + the golden ratio)")
	if not (0 < n0 < float('inf')):
		raise ValueError("n0 must be between 0 and ∞")
	
	n_1div2 = _ceil(cmath.log((b - a) / (2 * epsilon), 2))
	n_max = n_1div2 + n0
	y_a = f(a)
	y_b = f(b)
	
	if math.copysign(1, _itr(y_a)) == math.copysign(1, _itr(y_b)):
		raise ValueError("sign(f(a)) = sign(f(b)). There is no guaranteed root in the given interval.")
	
	j = 0
	while _gt(b - a, 2 * epsilon) and j < max_iter:
		# Calculating parameters:
		x_1div2 = (a + b) / 2
		r = epsilon * 2 ** (n_max - j) - (b - a) / 2
		delta = k1 * (b - a) ** k2
		
		# Interpolation:
		x_f = (y_b * a - y_a * b) / (y_b - y_a)
		
		# Truncation:
		sigma = math.copysign(1, _itr(x_1div2 - x_f))
		x_t = x_f + sigma * delta if _le(delta, abs(x_1div2 - x_f)) else x_1div2
		
		# Projection:
		x_ITP = x_t if _le(abs(x_t - x_1div2), r) else x_1div2 - sigma * r
		
		# Updating Interval:
		y_ITP = f(x_ITP)
		if _itr(y_ITP) > 0:
			b = x_ITP
			y_b = y_ITP
		elif _itr(y_ITP) < 0:
			a = x_ITP
			y_a = y_ITP
		else:
			a = b = x_ITP
		
		j += 1
	print("j", j)
	return (a + b) / 2

def _le(a, b):
	a = _itr(a)
	b = _itr(b)
	return a <= b

def _gt(a, b):
	a = _itr(a)
	b = _itr(b)
	return a > b

def _itr(x):
	r, i = x.real, x.imag
	a = abs(x)
	x = a if r + i >= 0 else -a
	return x

def _ceil(x):
	a = x.real
	b = x.imag
	a = math.ceil(a)
	b = math.ceil(b)
	x = gp.mpc(a, b)
	return x

def secant(f, x1, x2, rtol=1e-30, atol=1e-30, max_iter=100):
	xm = x0 = c = 0
#	print(f(x1) * f(x2))
	if (_itr(f(x1) * f(x2)) < 0):
		for i in range(max_iter):
			# calculate the intermediate value
			y1, y2 = f(x1), f(x2)
			oldx0 = x0
			x0 = ((x1 * y2 - x2 * y1) / (y2 - y1))
			
			# check if x0 is root of
			# equation or not
			c = y1 * f(x0)
			
			# update the value of interval
			x1, x2 = x2, x0
#			print(i, _itr(c))
			# if x0 is the root of equation
			# then break the loop
			if (c == 0 or cmath.isclose(oldx0, x0, rel_tol = rtol, abs_tol = atol)):
				break
		return x0
	else:
		return None

# Mathematical function
def f(x):
	return x ** 3 - 25

# Derivative of mathematical function
def df(x):
	return 3 * x ** 2

def solving(_list):
	for guess in _list:
#		root = newton_raphson(f, df, guess)
		root = secant(f, guess[0], guess[1])
		if root is not None:
			print("Root found for initial guess", guess, ":", root)
		else:
#			print("Newton-Raphson failed to converge for initial guess", guess)
			print("Secant failed to converge for initial guess", guess)

def main():
#	a = gp.mpfr(3)
#	b = gp.mpc(gp.mpfr('-1.46'), gp.mpfr('2.53'))
#	c = gp.mpc(gp.mpfr('-1.46'), gp.mpfr('-2.53'))
	a = (gp.mpfr('2.9'), gp.mpfr('3'))
	b0 = gp.mpc(gp.mpfr('-1.46'), gp.mpfr('2.53'))
	b1 = gp.mpc(gp.mpfr('-1.47'), gp.mpfr('2.54'))
	b = (b0, b1)
	c0 = gp.mpc(gp.mpfr('-1.47'), gp.mpfr('-2.54'))
	c1 = gp.mpc(gp.mpfr('-1.46'), gp.mpfr('-2.53'))
	c = (c0, c1)
	initial_guesses = [a, b, c]	# List of initial guesses
	solving(initial_guesses)
	print("³√25 =", gp.mpfr('25') ** (_one / 3))

if __name__ == "__main__":
	main()

